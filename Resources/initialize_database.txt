from ..Utils import Database

#--( Create Tables )-----------------------------------------#
def create_tables():
	# Customers Table
	Database.execute('''
		CREATE TABLE IF NOT EXISTS customers (
			customer_id INTEGER PRIMARY KEY AUTOINCREMENT,
			first_name TEXT NOT NULL,
			last_name TEXT NOT NULL,
			email TEXT UNIQUE,
			phone_number TEXT UNIQUE,
			password TEXT NOT NULL,
			street TEXT,
			city TEXT,
			state TEXT,
			zip_code INTEGER,
			created INTEGER NOT NULL,
			updated INTEGER NOT NULL )''')
	Database.execute('''CREATE INDEX IF NOT EXISTS index_customer_email ON customers (email)''')
	Database.execute('''CREATE INDEX IF NOT EXISTS index_customer_phone ON customers (phone_number)''')
	
	# Product Types Table
	Database.execute('''
		CREATE TABLE IF NOT EXISTS product_type_ids (
			product_type_id INTEGER PRIMARY KEY,
			product_type TEXT )''')
	Database.execute("INSERT INTO product_type_ids (product_type) VALUES ('Shirt')")
	Database.execute("INSERT INTO product_type_ids (product_type) VALUES ('Pants')")

	# Products Table
	Database.execute('''
		CREATE TABLE IF NOT EXISTS products (
			product_id INTEGER PRIMARY KEY,
			product_name TEXT NOT NULL,
			description TEXT NOT NULL,
			product_type_id INTEGER REFERENCES product_type_ids (product_type_id) )''')
	Database.execute('''CREATE INDEX IF NOT EXISTS index_product_name ON products (product_name)''')
	Database.execute('''CREATE INDEX IF NOT EXISTS index_product_type ON products (product_type_id)''')

	# Products Variants Table
	Database.execute('''
		CREATE TABLE IF NOT EXISTS product_variants (
			product_variant_id INTEGER PRIMARY KEY AUTOINCREMENT,
			product_id INTEGER NOT NULL,
			product_variant_name TEXT,
			unit_price NUMERIC(4, 2) NOT NULL,
			quantity_available INTEGER NOT NULL,
			image TEXT )''')
	
	products = [
		{
			"Id": 1,
			"Name": "Cool Cat Poker",
			"Description": "Because only the coolest cats play poker.",
			"Type Id": 1,
			"Variants": [
				{
					"Name": "Black",
					"Price": 25.99,
					"Available": 5,
					"Image": "static/product_images/poker_tee_black.png"
				}, {
					"Name": "White",
					"Price": 25.99,
					"Available": 5,
					"Image": "static/product_images/poker_tee_white.png"
				}, {
					"Name": "Red",
					"Price": 25.99,
					"Available": 5,
					"Image": "static/product_images/poker_tee_red.png"
				}, {
					"Name": "Blue",
					"Price": 25.99,
					"Available": 5,
					"Image": "static/product_images/poker_tee_blue.png"
				}
			]
		}, {
			"Id": 2,
			"Name": "A Cat Named Slickback",
			"Description": "A doggy bag is 90 bucks, a tee shirt is 30.",
			"Type Id": 1,
			"Variants": [
				{
					"Name": "Black",
					"Price": 29.99,
					"Available": 5,
					"Image": "static/product_images/cns_tee_black.png"
				}, {
					"Name": "White",
					"Price": 29.99,
					"Available": 5,
					"Image": "static/product_images/cns_tee_white.png"
				}, {
					"Name": "Red",
					"Price": 29.99,
					"Available": 5,
					"Image": "static/product_images/cns_tee_red.png"
				}, {
					"Name": "Blue",
					"Price": 29.99,
					"Available": 5,
					"Image": "static/product_images/cns_tee_blue.png"
				}
			]
		}, {
			"Id": 3,
			"Name": "Cool Cat Cash",
			"Description": "Just a baker kneading his dough.",
			"Type Id": 1,
			"Variants": [
				{
					"Name": "Black",
					"Price": 29.99,
					"Available": 5,
					"Image": "static/product_images/money_tee_black.png"
				}, {
					"Name": "White",
					"Price": 29.99,
					"Available": 5,
					"Image": "static/product_images/money_tee_white.png"
				}, {
					"Name": "Red",
					"Price": 29.99,
					"Available": 5,
					"Image": "static/product_images/money_tee_red.png"
				}, {
					"Name": "Blue",
					"Price": 29.99,
					"Available": 5,
					"Image": "static/product_images/money_tee_blue.png"
				}
			]
		}
	]
	for product in products:
		Database.execute("""
			INSERT INTO products (product_id, product_name, description, product_type_id)
			VALUES (?, ?, ?, ?)
		""", (product['Id'], product['Name'], product['Description'], product['Type Id']))
		for variant in product['Variants']:
			Database.execute("""
				INSERT INTO product_variants (product_id, product_variant_name, unit_price, quantity_available, image)
				VALUES (?, ?, ?, ?, ?)
			""", (product['Id'], variant['Name'], variant['Price'], variant['Available'], variant['Image']))

	# Cart Items Table
	Database.execute('''
		CREATE TABLE IF NOT EXISTS cart_items (
			cart_item_id INTEGER PRIMARY KEY AUTOINCREMENT,
			customer_id INTEGER NOT NULL REFERENCES customers (customer_id),
			product_variant_id INTEGER NOT NULL REFERENCES product_variants (product_variant_id),
			quantity INTEGER NOT NULL )''')
	Database.execute('''CREATE INDEX IF NOT EXISTS index_cart_item_customer ON cart_items (customer_id)''')
	
	# Cart Status Types Table
	Database.execute('''
		CREATE TABLE IF NOT EXISTS order_statuses (
			status_id INTEGER PRIMARY KEY,
			status TEXT )''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (1, 'Pending Payment')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (2, 'Failed')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (3, 'On Hold')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (4, 'Processing')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (5, 'Completed')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (6, 'Canceled')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (7, 'Refunded')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (8, 'Backordered')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (9, 'Partially Shipped')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (10, 'Shipped')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (11, 'Out for Delivery')''')
	Database.execute('''INSERT OR IGNORE INTO order_statuses (status_id, status) VALUES (12, 'Delivered')''')
	
	# Orders Table
	Database.execute('''
		CREATE TABLE IF NOT EXISTS orders (
			order_id INTEGER PRIMARY KEY AUTOINCREMENT,
			customer_id INTEGER NOT NULL REFERENCES customers (customer_id),
			status_id INTEGER NOT NULL REFERENCES order_statuses (status_id),
			created INTEGER NOT NULL,
			updated INTEGER NOT NULL )''')
	Database.execute('''CREATE INDEX IF NOT EXISTS index_order_customer ON orders (customer_id)''')
	
	# Order Items Table
	Database.execute('''
		CREATE TABLE IF NOT EXISTS order_items (
			order_item_id INTEGER PRIMARY KEY AUTOINCREMENT,
			order_id INTEGER NOT NULL REFERENCES orders (order_id),
			product_variant_id INTEGER NOT NULL REFERENCES product_variants (product_variant_id),
			quantity INTEGER NOT NULL,
			unit_price NUMERIC(4, 2) NOT NULL )''')
	Database.execute('''CREATE INDEX IF NOT EXISTS index_order_item_order ON order_items (order_id)''')

	Database.commit()
	print("Finished Creating Database and Tables.")

#--( Add Sample Data To Tables )-----------------------------#
def populate_tables():
	from faker import Faker
	fake = Faker()

	# Sample Customer
	first_name = "Test"
	last_name = "Account"
	email = "admin@email.com"
	phone_number = "+11234567890" #+ str(fake.random_int(min=1000000000, max=9999999999))
	password = Database.generate_password_hash("PASSWORD")

	street = fake.street_address()
	city = fake.city()
	state = fake.state()
	zip_code = fake.zipcode()
	created = Database.generate_timestamp()
	updated = created

	Database.execute("""
		INSERT INTO customers (first_name, last_name, email, phone_number, password, street, city, state, zip_code, created, updated)
		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
	""", (first_name, last_name, email, phone_number, password, street, city, state, zip_code, created, updated))


	# Generate sample data for cart items
	customer_id = 1
	product_variant_id = fake.random_element([row[0] for row in Database.execute("SELECT product_variant_id FROM product_variants").fetchall()])
	quantity = fake.random_int(min=1, max=10)

	Database.execute("""
		INSERT INTO cart_items (customer_id, product_variant_id, quantity)
		VALUES (?, ?, ?)
	""", (customer_id, product_variant_id, quantity))

	for order_id in range(1, 3):
		status_id = fake.random_int(min=1, max=12)
		created = Database.generate_timestamp()
		updated = created

		Database.execute("""
			INSERT INTO orders (customer_id, status_id, created, updated)
			VALUES (?, ?, ?, ?)
		""", (1, status_id, created, updated) )

		for _ in range(fake.random_int(min=1, max=4)):
			product = fake.random_element([(row[0], row[1]) for row in Database.execute("SELECT product_variant_id, unit_price FROM product_variants").fetchall()])
			product_variant_id	= product[0]
			unit_price			= product[1]
			quantity = fake.random_int(min=1, max=3)

			Database.execute("""
				INSERT INTO order_items (order_id, product_variant_id, quantity, unit_price)
				VALUES (?, ?, ?, ?)
			""", (order_id, product_variant_id, quantity, unit_price))

	print("Finished Populating Tables.")

#if __name__ == "__main__":
#	create_tables()
#	populate_tables()